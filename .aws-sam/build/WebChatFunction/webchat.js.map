{
  "version": 3,
  "sources": ["file:///C:/Users/Honor/AppData/Local/Temp/tmpss7m4omu/webchat.ts", "file:///C:/Users/Honor/AppData/Local/Temp/tmpss7m4omu/helperfunc.ts"],
  "sourcesContent": ["import { ApiGatewayManagementApiClient } from '@aws-sdk/client-apigatewaymanagementapi';\nimport { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\nimport { handleConnect, handleRegister, handleDisconnect, handleSend } from './helperfunc'\n\nexport const handler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n    const connectionId = event.requestContext.connectionId as string;\n    const routeKey = event.requestContext.routeKey;\n    const domain = event.requestContext.domainName;\n    const stage = event.requestContext.stage;\n\n    const clientAPI = new ApiGatewayManagementApiClient({\n        endpoint: `https://${domain}/${stage}`\n    });\n\n    try {\n        switch (routeKey) {\n            case '$connect':\n                return await handleConnect(event, connectionId ?? \"\");\n            case 'register':\n                return await handleRegister(event, connectionId ?? \"\");\n            case '$disconnect':\n                return await handleDisconnect(connectionId ?? \"\");\n            case 'send':\n                return await handleSend(event, clientAPI);\n            case '$default':\n                return {\n                    statusCode: 200,\n                    body: JSON.stringify(\"hit default route due to improper action\")\n                }\n            default:\n                return {\n                    statusCode: 400, \n                    body: JSON.stringify(\"Unsupported route\"),\n                    headers: { \"Content-Type\": \"application/json\" },\n                }\n        }  \n    } catch (error) {\n        console.error(error);\n        return {\n            statusCode: 500,\n            body: JSON.stringify(\"Internal Server Error\"),\n        };\n    }\n};\n", "import { DynamoDBClient, PutItemCommand, DeleteItemCommand, QueryCommand } from '@aws-sdk/client-dynamodb';\nimport { ApiGatewayManagementApiClient, PostToConnectionCommand } from '@aws-sdk/client-apigatewaymanagementapi';\nimport { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\n\nconst dynamo = new DynamoDBClient({});\nconst TABLE_NAME = process.env.TABLE_NAME;\n\nexport async function handleConnect(event: APIGatewayProxyEvent, connectionId: string): Promise<APIGatewayProxyResult> {\n    const item =  {\n        connectionId: { S: connectionId ?? \"\" },\n    };\n    try { \n        await dynamo.send(new PutItemCommand({ TableName: TABLE_NAME, Item: item }));\n        return {\n            statusCode: 200,\n            body: JSON.stringify(\"connected\")\n        };\n    } catch (err) {\n        console.log(err);\n        return {\n            statusCode: 400,\n            body: JSON.stringify(\"failed to connect\")\n        };\n    }\n}\n\nexport async function handleRegister(event: APIGatewayProxyEvent, connectionId: string): Promise<APIGatewayProxyResult> {\n    const { groupId: newGroup } = JSON.parse(event.body ?? '{}');\n    const item =  {\n        connectionId: { S: connectionId ?? \"\" },\n        groupId: { S: newGroup }\n    };\n    try { \n        await dynamo.send(new PutItemCommand({ TableName: TABLE_NAME, Item: item }));\n        return {\n            statusCode: 200,\n            body: JSON.stringify(\"group registered\")\n        };\n    } catch (err) {\n        console.log(err);\n        return {\n            statusCode: 400,\n            body: JSON.stringify(\"failed to register group\")\n        };\n    }\n}\n\nexport async function handleDisconnect(connectionId: string): Promise<APIGatewayProxyResult> {\n    try {\n        await dynamo.send(new DeleteItemCommand({\n            TableName: TABLE_NAME,\n            Key: {\n                connectionId: { S: connectionId ?? \"\" },\n            }\n        }));\n        return {\n            statusCode: 200,\n            body: JSON.stringify(\"disconnected\")\n        };\n    } catch (error) {\n        console.log(error);\n        return {\n            statusCode: 500,\n            body: JSON.stringify(\"failed to disconnect\")\n        }\n    }\n}\n\nexport async function handleSend(event: APIGatewayProxyEvent, clientAPI: ApiGatewayManagementApiClient): Promise<APIGatewayProxyResult> {\n    const { groupId, message } = JSON.parse(event.body ?? '{}');\n    const queryResult = await dynamo.send(new QueryCommand({\n        TableName: TABLE_NAME,\n        IndexName: 'groupId-index',\n        KeyConditionExpression: \"groupId = :g\",\n        ExpressionAttributeValues: {\n            \":g\": {S: groupId }\n        }\n    }));\n    const connections = queryResult.Items || [];\n    if (connections.length === 0) {\n        return {\n            statusCode: 404,\n            body: \"no active connections in group\"\n        };\n    }\n    try {\n        for (const item of connections) {\n            const targetId = item.connectionId.S;\n            await clientAPI.send(new PostToConnectionCommand({\n                ConnectionId: targetId,\n                Data: message\n            }));\n        }\n        return {\n            statusCode: 200,\n            body: JSON.stringify(\"message sent\")\n        };\n    } catch(error) {\n        console.log(error);\n        return {\n            statusCode: 400,\n            body: JSON.stringify(`failed to send message to group ${groupId}`)\n        }\n    }\n}"],
  "mappings": "4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAA8C,mDCA9C,IAAAC,EAAgF,oCAChFC,EAAuE,mDAGjEC,EAAS,IAAI,iBAAe,CAAC,CAAC,EAC9BC,EAAa,QAAQ,IAAI,WAE/B,eAAsBC,EAAcC,EAA6BC,EAAsD,CACnH,IAAMC,EAAQ,CACV,aAAc,CAAE,EAAGD,GAAgB,EAAG,CAC1C,EACA,GAAI,CACA,aAAMJ,EAAO,KAAK,IAAI,iBAAe,CAAE,UAAWC,EAAY,KAAMI,CAAK,CAAC,CAAC,EACpE,CACH,WAAY,IACZ,KAAM,KAAK,UAAU,WAAW,CACpC,CACJ,OAASC,EAAK,CACV,eAAQ,IAAIA,CAAG,EACR,CACH,WAAY,IACZ,KAAM,KAAK,UAAU,mBAAmB,CAC5C,CACJ,CACJ,CAEA,eAAsBC,EAAeJ,EAA6BC,EAAsD,CACpH,GAAM,CAAE,QAASI,CAAS,EAAI,KAAK,MAAML,EAAM,MAAQ,IAAI,EACrDE,EAAQ,CACV,aAAc,CAAE,EAAGD,GAAgB,EAAG,EACtC,QAAS,CAAE,EAAGI,CAAS,CAC3B,EACA,GAAI,CACA,aAAMR,EAAO,KAAK,IAAI,iBAAe,CAAE,UAAWC,EAAY,KAAMI,CAAK,CAAC,CAAC,EACpE,CACH,WAAY,IACZ,KAAM,KAAK,UAAU,kBAAkB,CAC3C,CACJ,OAASC,EAAK,CACV,eAAQ,IAAIA,CAAG,EACR,CACH,WAAY,IACZ,KAAM,KAAK,UAAU,0BAA0B,CACnD,CACJ,CACJ,CAEA,eAAsBG,EAAiBL,EAAsD,CACzF,GAAI,CACA,aAAMJ,EAAO,KAAK,IAAI,oBAAkB,CACpC,UAAWC,EACX,IAAK,CACD,aAAc,CAAE,EAAGG,GAAgB,EAAG,CAC1C,CACJ,CAAC,CAAC,EACK,CACH,WAAY,IACZ,KAAM,KAAK,UAAU,cAAc,CACvC,CACJ,OAASM,EAAO,CACZ,eAAQ,IAAIA,CAAK,EACV,CACH,WAAY,IACZ,KAAM,KAAK,UAAU,sBAAsB,CAC/C,CACJ,CACJ,CAEA,eAAsBC,EAAWR,EAA6BS,EAA0E,CACpI,GAAM,CAAE,QAAAC,EAAS,QAAAC,CAAQ,EAAI,KAAK,MAAMX,EAAM,MAAQ,IAAI,EASpDY,GARc,MAAMf,EAAO,KAAK,IAAI,eAAa,CACnD,UAAWC,EACX,UAAW,gBACX,uBAAwB,eACxB,0BAA2B,CACvB,KAAM,CAAC,EAAGY,CAAQ,CACtB,CACJ,CAAC,CAAC,GAC8B,OAAS,CAAC,EAC1C,GAAIE,EAAY,SAAW,EACvB,MAAO,CACH,WAAY,IACZ,KAAM,gCACV,EAEJ,GAAI,CACA,QAAWV,KAAQU,EAAa,CAC5B,IAAMC,EAAWX,EAAK,aAAa,EACnC,MAAMO,EAAU,KAAK,IAAI,0BAAwB,CAC7C,aAAcI,EACd,KAAMF,CACV,CAAC,CAAC,CACN,CACA,MAAO,CACH,WAAY,IACZ,KAAM,KAAK,UAAU,cAAc,CACvC,CACJ,OAAQJ,EAAO,CACX,eAAQ,IAAIA,CAAK,EACV,CACH,WAAY,IACZ,KAAM,KAAK,UAAU,mCAAmCG,CAAO,EAAE,CACrE,CACJ,CACJ,CDpGO,IAAMI,EAAU,MAAOC,GAAgE,CAC1F,IAAMC,EAAeD,EAAM,eAAe,aACpCE,EAAWF,EAAM,eAAe,SAChCG,EAASH,EAAM,eAAe,WAC9BI,EAAQJ,EAAM,eAAe,MAE7BK,EAAY,IAAI,gCAA8B,CAChD,SAAU,WAAWF,CAAM,IAAIC,CAAK,EACxC,CAAC,EAED,GAAI,CACA,OAAQF,EAAU,CACd,IAAK,WACD,OAAO,MAAMI,EAAcN,EAAOC,GAAgB,EAAE,EACxD,IAAK,WACD,OAAO,MAAMM,EAAeP,EAAOC,GAAgB,EAAE,EACzD,IAAK,cACD,OAAO,MAAMO,EAAiBP,GAAgB,EAAE,EACpD,IAAK,OACD,OAAO,MAAMQ,EAAWT,EAAOK,CAAS,EAC5C,IAAK,WACD,MAAO,CACH,WAAY,IACZ,KAAM,KAAK,UAAU,0CAA0C,CACnE,EACJ,QACI,MAAO,CACH,WAAY,IACZ,KAAM,KAAK,UAAU,mBAAmB,EACxC,QAAS,CAAE,eAAgB,kBAAmB,CAClD,CACR,CACJ,OAASK,EAAO,CACZ,eAAQ,MAAMA,CAAK,EACZ,CACH,WAAY,IACZ,KAAM,KAAK,UAAU,uBAAuB,CAChD,CACJ,CACJ",
  "names": ["webchat_exports", "__export", "handler", "__toCommonJS", "import_client_apigatewaymanagementapi", "import_client_dynamodb", "import_client_apigatewaymanagementapi", "dynamo", "TABLE_NAME", "handleConnect", "event", "connectionId", "item", "err", "handleRegister", "newGroup", "handleDisconnect", "error", "handleSend", "clientAPI", "groupId", "message", "connections", "targetId", "handler", "event", "connectionId", "routeKey", "domain", "stage", "clientAPI", "handleConnect", "handleRegister", "handleDisconnect", "handleSend", "error"]
}
